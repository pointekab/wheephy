/* 
 Ce framework est protégé par la loi relative au droit d'auteur et par les
 conventions internationales. Toute reproduction ou distribution partielle ou 
 totale dudit framework, par quelque moyen que ce soit, est strictement interdite.
 Toute personne ne respectant pas ces dispositions se rendra coupable du délit 
 de contrefaçon et sera passible des sanctions pénales prévues par la loi en vigueur.                           
 
 Crée en : 14 sept. 2019, 17:34:55
 Author     : WHEEPHY
 */

/**
 * 
 * @returns {undefined}
 */
function URL() {
    this.url = "";
}

/**
 * 
 * @type prototype
 */
URL.prototype = {
    /** Exemple d'utilisation ****
     *
     function test() {
     var page = new URL();
     page.send("./index.html");
     page.Goto("http://127.0.0.1/");}
     
     * @type type
     */


    /**
     * @description Charge l'adresse URL
     * @param {type} x
     * @returns {undefined}
     */
    send: function (x) {
        this.url = x;
    },

    /**
     * @description Ouvre l'adresse URL
     * @param {type} q
     * @returns {undefined}
     */

    Goto: function (q) {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (xhttp.readyState === 4 && xhttp.status === 200) {
                parent.location.href = q;
            }
        };
       // xhttp.addEventListener("progress", showProgress, false);
        xhttp.addEventListener("error", Seterror, false);
        xhttp.addEventListener("abort", Setabort, false);
        xhttp.open("GET", this.url, true);
        xhttp.send();
    },

    GotoNext: function (q) {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (xhttp.readyState === 4 && xhttp.status === 200) {
                if (xhttp.responseText === "not") {
                    if (q === 1) {
                        Note("<i class='fa fa-bell'></i><b>Erreur:</b> Nom d'utilisateur ou mot de passe incorrect! Veuillez réessayer s'il vous plaît... ");
                    }
                } else {
                    parent.location.href =xhttp.responseText;
                }
            }
        };
        xhttp.addEventListener("progress", showProgress, false);
        xhttp.addEventListener("error", Seterror, false);
        xhttp.addEventListener("abort", Setabort, false);
        xhttp.open("GET", this.url, true);
        xhttp.send();
    },

    /***
     * @description Ouvre l'adresse URL et renvoie un rapport en mode ajout
     * @param {type} q
     * @returns {undefined}
     */

    AppendText: function (q) {

        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (xhttp.readyState === 4 && xhttp.status === 200) {
                var text = document.createElement("div");
                text.innerHTML = xhttp.responseText;
                Element(q).appendChild(text);
            }
        };
        xhttp.addEventListener("progress", showProgress, false);
        xhttp.addEventListener("error", Seterror, false);
        xhttp.addEventListener("abort", Setabort, false);
        xhttp.open("GET", this.url, true);
        xhttp.send();
    },

    /***
     * @description Ouvre l'adresse URL et renvoie un rapport en mode écrasé
     * @param {type} q
     * @returns {undefined}
     */

    getHTML: function (q) {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (xhttp.readyState === 4 && xhttp.status === 200) {
                Element(q).innerHTML = xhttp.responseText;
            }
        };

        xhttp.addEventListener("progress", showProgress, false);
        xhttp.addEventListener("error", Seterror, false);
        xhttp.addEventListener("abort", Setabort, false);
        xhttp.open("GET", this.url, true);
        xhttp.send();
    },

    getHTMLByTag: function (q) {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (xhttp.readyState === 4 && xhttp.status === 200) {
                document.q.innerHTML = xhttp.responseText;
            }
        };

        xhttp.addEventListener("progress", showProgress, false);
        xhttp.addEventListener("error", Seterror, false);
        xhttp.addEventListener("abort", Setabort, false);
        xhttp.open("GET", this.url, true);
        xhttp.send();
    },

    /* isSent: function () {
     var xhttp = new XMLHttpRequest();
     
     xhttp.addEventListener("progress", showProgress, false);
     xhttp.addEventListener("error", Seterror, false);
     xhttp.addEventListener("abort", Setabort, false);
     xhttp.addEventListener("load", complete, false);
     
     xhttp.open("GET", this.url, true);
     xhttp.send();
     
     },*/

    /***
     * @description Recupère la valeur numérique retourné par l'adresse URL
     * @param {type} q
     * @returns {undefined}
     */
    getValue: function (q) {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (xhttp.readyState === 4 && xhttp.status === 200) {
                Element(q).value = xhttp.responseText;
            }
        };
        xhttp.upload.addEventListener("progress", showProgress, false);
        xhttp.addEventListener("error", Seterror, false);
        xhttp.addEventListener("abort", Setabort, false);
        xhttp.open("GET", this.url, true);
        xhttp.send();
    },

    copyFile: function (img, q, URI, appender) {
        var file = Element(img).files[0];
        var data = new FormData();
        data.append(img, file);

        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (xhttp.readyState === 4 && xhttp.status === 200) {
                /** var text = document.createElement("div");
                 text.innerHTML = xhttp.responseText;
                 Element(q).appendChild(text);*/

                //Affichage de la copie
                Appender(URI, appender);
            }
        };
        xhttp.upload.addEventListener("progress", showProgress, false);
        xhttp.addEventListener("load", Complete, false);
        xhttp.addEventListener("error", Seterror, false);
        xhttp.addEventListener("abort", Setabort, false);

        xhttp.open("POST", this.url);
        xhttp.send(data);
    }
};


/**
 * @description Element permet de recuperer un élement (id ou classe)
 * @param {type} el
 * @returns {Element|NodeList}
 */
var Element = function (el) {

    if (isId(el)) {
        return document.getElementById(el);
    } else if (isClass(el)) {
        return document.getElementsByClassName(el)[0];
    } else {
        return document.getElementsByTagName(el)[0];
    }
};


/**
 * @description ElementVal permet de recuperer la valeur d'un élement (INPUT, SELECT)
 * @param {type} el
 * @returns {Element|NodeList}
 */
var ElementVal = function (el) {
    if (isId(el)) {
        return document.getElementById(el).value;
    } else if (isClass(el)) {
        return document.getElementsByClassName(el)[0].value;
    }
};


/**
 * @description Recupère le contenu texte d'une balise (Div, P, Span, etc.)
 * @param {type} el
 * @returns {String}
 */
var ElementText = function (el) {
    if (isId(el)) {
        return document.getElementById(el).textContent;
    } else if (isClass(el)) {
        return document.getElementsByClassName(el)[0].textContent;
    } else {
        return document.getElementsByTagName(el)[0].textContent;
    }
};

/**
 * @description Recupère le contenu HTML d'une balise (Div, P, Span, etc.)
 * @param {type} el
 * @returns {String}
 */
var getHTML = function (el) {
    if (isId(el)) {
        return document.getElementById(el).innerHTML;
    } else if (isClass(el)) {
        return document.getElementsByClassName(el)[0].innerHTML;
    } else {
        return document.getElementsByTagName(el)[0].innerHTML;
    }
};



/**
 * @description teste si l'élément est un id ou une classe
 * @param {type} element
 * @returns {Boolean} retourne vrai si c'est un id, false dans le cas contraire
 */

var isId = function (element) {

    try {
        if (document.getElementById(element).hasAttribute("id") === true) {
            return true;
        }
    } catch (Exception) {
        return false;
    }
};

/**
 * @description teste si l'élément est une classe ou une classe
 * @param {type} el
 * @returns {Boolean} retourne vrai si c'est une classe, false dans le cas contraire
 */
var isClass = function (el) {

    try {
        if (document.getElementsByClassName(el)[0].hasAttribute("class") === true) {
            return true;
        }
    } catch (Exception) {
        return false;
    }
};


/**
 * @description Formate un nombre de type 5000 en un nombre de type 5,000
 * @param {type} number
 * @returns {String}
 */
var NumberFormator = function (number) {
    return(number
            .toFixed(0)
            .replace('.', ',')
            .replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1 '));
};

/**
 * @description Elève une notification
 * @param {type} notice Le message de la notification
 * @returns {undefined}
 */
var Note = function (notice) {

    var text = document.createElement("div");
    text.innerHTML = notice;
    text.setAttribute("id", "humbergerWheep");

    Element("body").appendChild(text);
    setTimeout(function () {
        Element("body").removeChild(text);
    }, 6000);
};

/**
 * 
 * @returns {undefined}
 */
function Seterror() {
    Note("Impossible d'atteindre la cible, échec de connexion...");
}
/**
 * 
 * @returns {undefined}
 */
function Setabort() {
    Note("Impossible d'atteindre la cible, l'opération a été abolie");
}

function complete() {
    return "true";
}


/**
 * @description Elève une barre de progression comme notification
 * @param {type} event
 * @returns {undefined}
 */
function showProgress(event) {

    var pourcentage = (event.loaded / event.total) * 100;

    Element("status").innerHTML = '<div style="background-color:#999; text-align:left; margin-top:1%;">\n\
<span style="position:absolute; margin-left:40%; font-size:11px; color:red; font-weight:bold; ">'
            + Math.round(pourcentage) +
            ' %</span><div style="background-image: linear-gradient(white, whitesmoke); height:23px; text-align: center; width:'
            + Math.round(pourcentage) +
            '%"></div></div>';

}
;


function Complete(event) {
    Element("status").innerHTML = ' ';
    Note(event.target.responseText);

}
;


/**
 * @description Change l'arrière plan d'un élément d'une manière aléatoire
 * @param {type} q Nombre aléatoire
 * @param {type} p id de l'élément
 * @param {type} i type de nuance (black | blue)
 * @returns {undefined}
 */

function background(q, p, i) {
    var tab = [];

    if (i === "black") {
        tab = new Array("#ddd", '#fff', 'whitesmoke', "#ccc", "#666", "#999", "#888", "#fff");
        $(p).css("color", tab[q]).fadeIn(1000);
    }

    if (i === "blue") {
        tab = new Array("rgba(0,216,0,1)", "rgba(103,200,0,2)", "rgba(0,206,230,3)", "rgba(173,218,230,1)", "rgba(1,222,222,0)", "rgba(173,216,220,0)", "rgba(173,316,230,0)", "rgba(216,216,216,216)", "rgba(173,173,173,1)", "rgba(230,230,230,1)", "rgba(200,200,216,0)", "rgba(240,216,240,1)");
        $(p).css("background", tab[q]).fadeIn(1000);
    }


    $(p).css("-webkit-transition", "all 0.8s ease-in-out");
    $(p).css("-o-transition", "all 0.8s ease-in-out");
    $(p).css("transition", "all 0.8s ease-in-out");

    /**
     * Exemple:
     <script>
     setInterval(function () {
     var b = 3;
     var q = Math.random(b) * 10;
     background(Math.round(q), "#loginbtn", "blue");
     }, 6000);
     </script>
     */
}


/**
 * @description Change l'arrière plan d'un élément d'une manière aléatoire
 * @param {type} q Nombre aléatoire
 * @param {type} p id de l'élément
 * @param {type} i type de nuance (black | blue)
 * @returns {undefined}
 */

function background_shadow(q, p, i) {
    var tab = [];
    if (i === "blue") {
        tab = new Array("inset 2px 20px 150px 150px #2f2f2f", "inset 2px 20px 150px 100px #2f2f2f", "inset 2px 20px 150px 10px #2f2f2f", "inset 2px 20px 150px 130px #2f2f2f", "inset 2px 20px 150px 50px #2f2f2f", "inset 2px 20px 150px 140px #2f2f2f", "inset 2px 20px 150px 70px #2f2f2f");
        $(p).css("-webkit-box-shadow", tab[q]).fadeIn(1000);
        $(p).css("-moz-box-shadow", tab[q]).fadeIn(1000);
        $(p).css("box-shadow", tab[q]).fadeIn(1000);
    }


    $(p).css("-webkit-transition", "all 0.8s ease-in-out");
    $(p).css("-o-transition", "all 0.8s ease-in-out");
    $(p).css("transition", "all 0.8s ease-in-out");

    /**
     * Exemple:
     <script>
     setInterval(function () {
     var b = 3;
     var q = Math.random(b) * 10;
     background(Math.round(q), "#loginbtn", "blue");
     }, 6000);
     </script>
     */
}

/**
 * 
 * @param {type} url
 * @param {type} id
 * @returns {undefined}
 */
function Appender(url, id) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (xhttp.readyState === 4 && xhttp.status === 200) {
            var text = document.createElement("div");
            text.innerHTML = xhttp.responseText;
            //  Element(id).appendChild(text);
            $("#" + id).prepend(text);
        }
    };

    xhttp.addEventListener("error", Seterror, false);
    xhttp.addEventListener("abort", Setabort, false);
    xhttp.open("GET", url, true);
    xhttp.send();
}

/**
 * @description Fonction js pour ôter un item
 * @param {type} item
 * @returns {undefined}
 */
function Remover(item) {
    $("#" + item).remove();
}